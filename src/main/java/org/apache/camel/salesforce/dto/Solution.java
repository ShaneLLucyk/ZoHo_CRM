/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin.
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Solution
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Solution")
public class Solution extends AbstractDescribedSObjectBase {

    public Solution() {
        getAttributes().setType("Solution");
    }

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    private String SolutionNumber;

    @JsonProperty("SolutionNumber")
    public String getSolutionNumber() {
        return this.SolutionNumber;
    }

    @JsonProperty("SolutionNumber")
    public void setSolutionNumber(String SolutionNumber) {
        this.SolutionNumber = SolutionNumber;
    }

    private String SolutionName;

    @JsonProperty("SolutionName")
    public String getSolutionName() {
        return this.SolutionName;
    }

    @JsonProperty("SolutionName")
    public void setSolutionName(String SolutionName) {
        this.SolutionName = SolutionName;
    }

    private Boolean IsPublished;

    @JsonProperty("IsPublished")
    public Boolean getIsPublished() {
        return this.IsPublished;
    }

    @JsonProperty("IsPublished")
    public void setIsPublished(Boolean IsPublished) {
        this.IsPublished = IsPublished;
    }

    private Boolean IsPublishedInPublicKb;

    @JsonProperty("IsPublishedInPublicKb")
    public Boolean getIsPublishedInPublicKb() {
        return this.IsPublishedInPublicKb;
    }

    @JsonProperty("IsPublishedInPublicKb")
    public void setIsPublishedInPublicKb(Boolean IsPublishedInPublicKb) {
        this.IsPublishedInPublicKb = IsPublishedInPublicKb;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Solution_StatusEnum Status;

    @JsonProperty("Status")
    public Solution_StatusEnum getStatus() {
        return this.Status;
    }

    @JsonProperty("Status")
    public void setStatus(Solution_StatusEnum Status) {
        this.Status = Status;
    }

    private Boolean IsReviewed;

    @JsonProperty("IsReviewed")
    public Boolean getIsReviewed() {
        return this.IsReviewed;
    }

    @JsonProperty("IsReviewed")
    public void setIsReviewed(Boolean IsReviewed) {
        this.IsReviewed = IsReviewed;
    }

    private String SolutionNote;

    @JsonProperty("SolutionNote")
    public String getSolutionNote() {
        return this.SolutionNote;
    }

    @JsonProperty("SolutionNote")
    public void setSolutionNote(String SolutionNote) {
        this.SolutionNote = SolutionNote;
    }

    private Integer TimesUsed;

    @JsonProperty("TimesUsed")
    public Integer getTimesUsed() {
        return this.TimesUsed;
    }

    @JsonProperty("TimesUsed")
    public void setTimesUsed(Integer TimesUsed) {
        this.TimesUsed = TimesUsed;
    }

    private Boolean IsHtml;

    @JsonProperty("IsHtml")
    public Boolean getIsHtml() {
        return this.IsHtml;
    }

    @JsonProperty("IsHtml")
    public void setIsHtml(Boolean IsHtml) {
        this.IsHtml = IsHtml;
    }

     private QueryRecordsEvent Events;

    @JsonProperty("Events")
    public QueryRecordsEvent getEvents() {
        return Events;
    }

    @JsonProperty("Events")
    public void setEvents(QueryRecordsEvent Events) {
        this.Events = Events;
    }
    private QueryRecordsTask Tasks;

    @JsonProperty("Tasks")
    public QueryRecordsTask getTasks() {
        return Tasks;
    }

    @JsonProperty("Tasks")
    public void setTasks(QueryRecordsTask Tasks) {
        this.Tasks = Tasks;
    }

    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Solution ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("SolutionNumber", "Solution Number", "string", "xsd:string", 30, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("SolutionName", "Title", "string", "xsd:string", 255, false, false, true, false, false, false, true);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("IsPublished", "Public", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("IsPublishedInPublicKb", "Visible in Public Knowledge Base", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("Status", "Status", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("IsReviewed", "Reviewed", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("SolutionNote", "Description", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("OwnerId", "Owner ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("TimesUsed", "Num Related Cases", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("LastViewedDate", "Last Viewed Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("LastReferencedDate", "Last Referenced Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("IsHtml", "Is Html", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField19);

        description.setLabel("Solution");
        description.setLabelPlural("Solutions");
        description.setName("Solution");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setApprovalLayouts("/services/data/v34.0/sobjects/Solution/describe/approvalLayouts");
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/Solution/describe/compactLayouts");
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Solution/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/Solution/describe/layouts");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Solution/{ID}");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Solution");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://na172.salesforce.com/{ID}");
        sObjectDescriptionUrls1.setUiEditTemplate("https://na172.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setUiNewRecord("https://na172.salesforce.com/501/e");
        description.setUrls(sObjectDescriptionUrls1);

        return description;
    }
}
